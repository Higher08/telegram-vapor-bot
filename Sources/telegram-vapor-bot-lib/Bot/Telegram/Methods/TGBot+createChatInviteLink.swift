// Telegram-vapor-bot-lib - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

public extension TGBot {

    /// Parameters container struct for `createChatInviteLink` method
    struct CreateChatInviteLinkParams: Encodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Point in time (Unix timestamp) when the link will expire
        var expireDate: Int?

        /// Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
        var memberLimit: Int?

        /// Custom keys for coding/decoding `CreateChatInviteLinkParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case expireDate = "expire_date"
            case memberLimit = "member_limit"
        }

        public init(chatId: ChatId, expireDate: Int? = nil, memberLimit: Int? = nil) {
            self.chatId = chatId
            self.expireDate = expireDate
            self.memberLimit = memberLimit
        }
    }

    /**
     Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.

     SeeAlso Telegram Bot API Reference:
     [CreateChatInviteLinkParams](https://core.telegram.org/bots/api#createchatinvitelink)
     
     - Parameters:
         - params: Parameters container, see `CreateChatInviteLinkParams` struct
     - Throws: Throws on errors
     - Returns: EventLoopFuture of `Bool` type
     */
    @discardableResult
    func createChatInviteLink(params: CreateChatInviteLinkParams) throws -> EventLoopFuture<Bool> {
        let methodURL: URI = .init(string: getMethodURL("createChatInviteLink"))
        let future: EventLoopFuture<Bool> = tgClient.post(methodURL, params: params)
        return future
    }
}
