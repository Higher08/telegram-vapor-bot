// Telegram-vapor-bot-lib - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

import Vapor

public extension TGBot {

    /// Parameters container struct for `setStickerSetThumb` method
    struct SetStickerSetThumbParams: Encodable {

        /// Sticker set name
        var name: String

        /// User identifier of the sticker set owner
        var userId: Int64

        /// A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/animated_stickers#technical-requirements for animated sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files Â». Animated sticker set thumbnail can't be uploaded via HTTP URL.
        var thumb: FileInfo?

        /// Custom keys for coding/decoding `SetStickerSetThumbParams` struct
        enum CodingKeys: String, CodingKey {
            case name = "name"
            case userId = "user_id"
            case thumb = "thumb"
        }

        public init(name: String, userId: Int64, thumb: FileInfo? = nil) {
            self.name = name
            self.userId = userId
            self.thumb = thumb
        }
    }

    /**
     Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [SetStickerSetThumbParams](https://core.telegram.org/bots/api#setstickersetthumb)
     
     - Parameters:
         - params: Parameters container, see `SetStickerSetThumbParams` struct
     - Throws: Throws on errors
     - Returns: EventLoopFuture of `Bool` type
     */
    @discardableResult
    func setStickerSetThumb(params: SetStickerSetThumbParams) throws -> EventLoopFuture<Bool> {
        let methodURL: URI = .init(string: getMethodURL("setStickerSetThumb"))
        let future: EventLoopFuture<Bool> = tgClient.post(methodURL, params: params, as: nil)
        return future
    }
}
