// Telegram-vapor-bot-lib - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

import Vapor

public extension TGBot {

    /// Parameters container struct for `forwardMessage` method
    struct ForwardMessageParams: Encodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
        var fromChatId: ChatId

        /// Sends the message silently. Users will receive a notification with no sound.
        var disableNotification: Bool?

        /// Message identifier in the chat specified in from_chat_id
        var messageId: Int

        /// Custom keys for coding/decoding `ForwardMessageParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case fromChatId = "from_chat_id"
            case disableNotification = "disable_notification"
            case messageId = "message_id"
        }

        public init(chatId: ChatId, fromChatId: ChatId, disableNotification: Bool? = nil, messageId: Int) {
            self.chatId = chatId
            self.fromChatId = fromChatId
            self.disableNotification = disableNotification
            self.messageId = messageId
        }
    }

    /**
     Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.

     SeeAlso Telegram Bot API Reference:
     [ForwardMessageParams](https://core.telegram.org/bots/api#forwardmessage)
     
     - Parameters:
         - params: Parameters container, see `ForwardMessageParams` struct
     - Throws: Throws on errors
     - Returns: EventLoopFuture of `Message` type
     */
    @discardableResult
    func forwardMessage(params: ForwardMessageParams) throws -> EventLoopFuture<Message> {
        let methodURL: URI = .init(string: getMethodURL("forwardMessage"))
        let future: EventLoopFuture<Message> = tgClient.post(methodURL, params: params)
        return future
    }
}
